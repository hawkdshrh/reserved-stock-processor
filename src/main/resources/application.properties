quarkus.kafka-streams.topics=reserved-stock,shipments,orders

kafka.bootstrap.servers=${BOOTSTRAP_SERVERS}

kafka.security.protocol=SASL_SSL
kafka.sasl.mechanism=OAUTHBEARER
kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${TOKEN_ENDPOINT_URI}" ;
kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

#mp.messaging.outgoing.orders-out.connector=smallrye-kafka
#mp.messaging.outgoing.orders-out.topic=orders
#mp.messaging.outgoing.orders-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

#mp.messaging.outgoing.reserved-stock.connector=smallrye-kafka
#mp.messaging.outgoing.reserved-stock.topic=reserved-stock
#mp.messaging.outgoing.reserved-stock.key.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer
#mp.messaging.outgoing.reserved-stock.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

#mp.messaging.incoming.orders.connector=smallrye-kafka
#mp.messaging.incoming.orders.topic=orders
#mp.messaging.incoming.orders.value.deserializer=org.acme.serde.OrderDeserializer

#mp.messaging.outgoing.shipments-out.connector=smallrye-kafka
#mp.messaging.outgoing.shipments-out.topic=shipments
#mp.messaging.outgoing.shipments-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

#mp.messaging.incoming.shipments.connector=smallrye-kafka
#mp.messaging.incoming.shipments.topic=shipments
#mp.messaging.incoming.shipments.value.deserializer=org.acme.serde.OrderDeserializer

quarkus.kafka-streams.security.protocol=SASL_SSL
quarkus.kafka-streams.sasl.mechanism=OAUTHBEARER
quarkus.kafka-streams.sasl.jaas-config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${TOKEN_ENDPOINT_URI}" ;
kafka-streams.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

# Quick reconnection for dev mode
kafka-streams.consumer.heartbeat.interval.ms=200
kafka-streams.reconnect.backoff.max.ms=30000